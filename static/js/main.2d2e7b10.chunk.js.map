{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","containers/ColorPicker.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","src","alt","CardList","robots","cardList","map","user","index","SearchBox","searchEvent","type","placeholder","onChange","ColorPicker","changeGradient","event","setState","gradientOnex","document","querySelector","gradientTwox","body","style","background","state","value","console","log","width","this","Component","Scroll","overflowY","height","borderTop","borderBottom","children","App","onSearchEvent","searchField","target","fetch","then","reponse","json","users","filteredRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kOAiBeA,EAfF,SAACC,GAAW,IAEdC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GAEpB,OACI,yBAAKC,UAAU,sCACX,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,6BACI,4BAAKL,GACL,2BAAIC,MCKLK,EAbE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAETC,EAAWD,EAAOE,KAAI,SAACC,EAAMC,GAC/B,OAAO,kBAAC,EAAD,CAAMT,GAAIK,EAAOI,GAAOT,GAAIF,KAAMO,EAAOI,GAAOX,KAAMC,MAAOM,EAAOI,GAAOV,WAGtF,OACA,6BACKO,ICAMI,EATG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAEhB,OACI,yBAAKV,UAAU,OACX,2BAAOA,UAAU,wCAAwCW,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCiC1GI,E,kDAnCX,aAAe,IAAD,8BACV,gBAOJC,eAAiB,SAACC,GAEd,EAAKC,SAAS,CACVC,aAAeC,SAASC,cAAc,iBACtCC,aAAeF,SAASC,cAAc,mBAG1CD,SAASG,KAAKC,MAAMC,WAAY,6BAA+B,EAAKC,MAAMJ,aAAaK,MAAQ,MAAO,EAAKD,MAAMP,aAAaQ,MAAM,IAEpIC,QAAQC,IAAI,QAAU,EAAKH,MAAMP,aAAaQ,QAf9C,EAAKD,MAAQ,CACTP,aAAc,GACdG,aAAc,IAJR,E,qDAqBV,OACA,yBAAKE,MAAO,CAACM,MAAO,QAChB,6BACI,yBAAK7B,UAAU,gBACX,2BAAOW,KAAK,QAAQZ,GAAG,eAAeF,KAAK,eAAe6B,MAAOI,KAAKL,MAAMP,aAAaQ,MAAOb,SAAUiB,KAAKf,iBAC/G,2BAAOJ,KAAK,QAAQZ,GAAG,eAAeF,KAAK,eAAe6B,MAAOI,KAAKL,MAAMJ,aAAaK,MAAOb,SAAUiB,KAAKf,wB,GA5BzGgB,aCSXC,EATA,SAACpC,GAEZ,OACI,yBAAK2B,MAAO,CAACU,UAAW,SAAUC,OAAQ,QAASC,UAAW,sBAAuBC,aAAc,wBAC9FxC,EAAMyC,WCyCJC,G,wDAtCX,aAAe,IAAD,8BACV,gBAcJC,cAAgB,SAACvB,GACb,EAAKC,SAAS,CAAEuB,YAAaxB,EAAMyB,OAAOf,SAd1C,EAAKD,MAAQ,CACTrB,OAAQ,GACRoC,YAAa,IAJP,E,gEAQO,IAAD,OAEhBE,MAAM,8CACDC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GAAK,OAAI,EAAK7B,SAAS,CAAEb,OAAS0C,S,+BAOvC,IAAD,OAEEC,EAAiBjB,KAAKL,MAAMrB,OAAO4C,QAAQ,SAAAC,GAC7C,OAAOA,EAAMpD,KAAKqD,cAAcC,SAAS,EAAK1B,MAAMe,YAAYU,kBAGpE,OACI,yBAAKlD,UAAU,MACX,kBAAC,EAAD,MACA,2CACA,kBAAC,EAAD,CAAWU,YAAaoB,KAAKS,gBAC7B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUnC,OAAQ2C,U,GAjCpBhB,cCKEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,6BACE,kBAAC,EAAD,QAGJxC,SAASyC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,a","file":"static/js/main.2d2e7b10.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\r\n    const {name, email, id} = props;\r\n\r\n    return(\r\n        <div className='bg-light-blue dib br3 pa2 ma2 grow'>\r\n            <img src={`https://robohash.org/${id}?200*200`} alt='robots'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    const cardList = robots.map((user, index) => {\r\n        return <Card id={robots[index].id} name={robots[index].name} email={robots[index].email} />;\r\n    });\r\n\r\n    return(\r\n    <div>\r\n        {cardList}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchEvent}) => {\r\n\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--light-blue bg-lightest-blue' type='search' placeholder='search robots' onChange={searchEvent}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass ColorPicker extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            gradientOnex: '',\r\n            gradientTwox: ''\r\n        }\r\n    }\r\n\r\n    changeGradient = (event) => {\r\n\r\n        this.setState({\r\n            gradientOnex : document.querySelector(\"#gradient-one\"),\r\n            gradientTwox : document.querySelector(\"#gradient-two\")\r\n        });\r\n\r\n        document.body.style.background= \"linear-gradient(to right, \" + this.state.gradientTwox.value + \" , \"+ this.state.gradientOnex.value+\")\";\r\n\r\n        console.log(\"test \" + this.state.gradientOnex.value);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n        <div style={{width: '10%'}}>\r\n            <div>\r\n                <div className=\"color-picker\">\r\n                    <input type=\"color\" id=\"gradient-one\" name=\"gradient-one\" value={this.state.gradientOnex.value} onChange={this.changeGradient}/>\r\n                    <input type=\"color\" id=\"gradient-two\" name=\"gradient-two\" value={this.state.gradientTwox.value} onChange={this.changeGradient}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        );\r\n    };    \r\n\r\n} \r\n\r\nexport default ColorPicker;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\n    return (\r\n        <div style={{overflowY: 'scroll', height: '800px', borderTop: '2px solid lightblue', borderBottom: '2px solid lightblue'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ColorPicker from './ColorPicker';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(reponse => reponse.json())\r\n            .then(users => this.setState({ robots : users}));\r\n    }\r\n\r\n    onSearchEvent = (event) => {\r\n        this.setState({ searchField: event.target.value })\r\n    }\r\n\r\n    render(){\r\n\r\n        const filteredRobots = this.state.robots.filter( robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n        });\r\n\r\n        return(\r\n            <div className='tc'>\r\n                <ColorPicker />\r\n                <h1>ROBOFRIENDS</h1>\r\n                <SearchBox searchEvent={this.onSearchEvent}/>\r\n                <Scroll>\r\n                    <CardList robots={filteredRobots}/>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}